import java.lang.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.io.*;

public class HuffmanCompression {
	
	List<Symbol> frequencyTable = new ArrayList<Symbol>();
	List<Symbol> stack = new ArrayList<Symbol>();
	List<Symbol> bTree = new ArrayList<Symbol>();
	
	HuffmanCompression() {
	
		String alphabet = null;

		alphabet = CatchInput();			// Capture the alphabet symbols
		CreateTable(alphabet);				// Create the frequency table
		Collections.sort(frequencyTable);	// Sort the frequency table
		CombiningSymbols();					// Combinations with frequency in focus
		CreateBTree();						// Creating the b-Tree
		
		System.out.println(frequencyTable.get(0).symbol+": "+frequencyTable.get(0).frequency);
		for(int i = 0; i < stack.size(); i++) {
			System.out.println(stack.get(i).symbol+":"+stack.get(i).frequency);			
		}

	}

		
	// To capture "Symbols:frequency" from keyboard
	public static String CatchInput() {
		String input = null;
		BufferedReader in;
		
		System.out.println("Tell me the symbols and its frequencies:");
		
		in = new BufferedReader(new InputStreamReader(System.in));
		
		try {
			input = in.readLine();
		}
		catch(Exception ex) {
			System.out.println("Error");
		}
		
		return input;
	}
	
	// Create the frequency table
	public void CreateTable(String alphabet) {
		String[] pieces1, pieces2;
		Symbol s;
		
		// Split the string and get each "symbol:frequency"
		pieces1 = alphabet.split(", ");
		
		for(int i = 0; i < pieces1.length; i++)
		{
			// Split again but in ":"
			pieces2 = pieces1[i].split(":");
			s = new Symbol(pieces2[0], Integer.parseInt(pieces2[1]));
			frequencyTable.add(s);	
		}
	}
	
	// Combine the Symbols following Huffman algorithm until frequencyTable is only 1
	public void CombiningSymbols() {
		int auxFreq = 0;
		int i;
		String auxSym = null;
		Symbol aux;
		
		while(frequencyTable.size() != 1) {
			// sum the ultimate and penultimate 
			auxFreq = frequencyTable.get(frequencyTable.size() - 1).frequency
					+ frequencyTable.get(frequencyTable.size() - 2).frequency;
			
			// concatenate the ultimate and penultimate
			auxSym = "("+frequencyTable.get(frequencyTable.size() - 2).symbol
					+ frequencyTable.get(frequencyTable.size() - 1).symbol+")";
			
			aux = new Symbol(auxSym, auxFreq);
			
			// stack the ultimate, penultimate and the combination between them
			stack.add(0, frequencyTable.get(frequencyTable.size() - 1));
			stack.add(0, frequencyTable.get(frequencyTable.size() - 2));
			stack.add(0, aux);
			
			frequencyTable.remove(frequencyTable.size() - 1);
			frequencyTable.remove(frequencyTable.size() - 1);
			
			// This is the bottleneck and can be more efficient with a second list
			for(i = frequencyTable.size() - 1; i >= 0; i--) {
				if(auxFreq < frequencyTable.get(i).frequency) {
					break;
				}
			}
			
			frequencyTable.add(i+1, aux);
		}
	}
	
	public void CreateBTree() {
		int i = 1;
		
		bTree.add(0, null);
		bTree.add(i, stack.get(0));
		
		while(stack.size() != 0) {
			
			for(i = 1; bTree.get(i).symbol == stack.get(0).symbol; i++) {
			// j find the 1st stack elemnt in the array	
			}
			
			
		}
	}

	public static void main(String[] args) {
		new HuffmanCompression();
	}
}

// Each symbol:frequency of the frequency table
class Symbol implements Comparable<Symbol> {
	
	String symbol = null;
	int frequency = 0;
	
	public Symbol(String symbol, int frequency) {
		this.symbol = symbol;
		this.frequency = frequency;
	}
	
	public String getSymbol() {
		return symbol;
	}
	
	public int getFrequency() {
		return frequency;
	}

	@Override
	public int compareTo(Symbol compareSymbol) {
		int compareFrequency = ((Symbol) compareSymbol).getFrequency();
		return compareFrequency - this.frequency;
	}
}